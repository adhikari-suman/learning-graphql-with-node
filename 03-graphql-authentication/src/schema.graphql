type Query {
  users(query: String, first: Int, skip: Int, after: String): [User!]!
  posts(query: String, first: Int, skip: Int, after: String): [Post!]!
  myPosts(query: String, first: Int, skip: Int, after: String): [Post!]!
  me: User!
  post(id: ID!): Post!
  comments(first: Int, skip: Int, after: String): [Comment!]!
}

type Mutation {
  login(data: LoginUserInput): AuthPayload!
  createUser(data: CreateUserInput): AuthPayload!
  deleteUser: User!
  updateUser(data: UpdateUserInput!): User!
  createPost(data: CreatePostInput): Post!
  updatePost(id: ID!, data: UpdatePostInput!): Post!
  deletePost(id: ID!): Post!
  createComment(data: CreateCommentInput): Comment!
  updateComment(id: ID!, data: UpdateCommentInput): Comment!
  deleteComment(id: ID!): Comment!
}

type AuthPayload {
  user: User!
  token: String!
}

type Subscription {
  comment(postId: ID!): CommentSubscriptionPayload!
  post: PostSubscriptionPayload!
  myPost: PostSubscriptionPayload!
}

input LoginUserInput {
  email: String!
  password: String!
}

input CreateUserInput {
  name: String!
  email: String!
  password: String!
  age: Int
}

input UpdateUserInput {
  name: String
  email: String
  age: Int
  password: String
}

input CreatePostInput {
  title: String!
  body: String!
  published: Boolean!
}

input UpdatePostInput {
  title: String
  body: String
  published: Boolean
}

input CreateCommentInput {
  text: String!
  post: ID!
}

input UpdateCommentInput {
  text: String
}

type User {
  id: ID!
  name: String!
  email: String
  age: Int
  posts: [Post!]!
  comments: [Comment!]!
  updatedAt: String!
  createdAt: String!
}

type Post {
  id: ID!
  title: String!
  body: String!
  published: Boolean!
  author: User!
  comments: [Comment!]!
  updatedAt: String!
  createdAt: String!
}

type Comment {
  id: ID!
  text: String!
  author: User!
  post: Post!
  updatedAt: String!
  createdAt: String!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

type PostSubscriptionPayload {
  mutation: MutationType!
  data: Post!
}

type CommentSubscriptionPayload {
  mutation: MutationType!
  data: Comment!
}
